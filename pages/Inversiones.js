import Link from "next/link";
import React, { useState, useEffect } from "react";
import { useWeb3Contract, useMoralis } from "react-moralis";
import axios from "axios";
import { ethers } from "ethers";
import { useRouter } from "next/router";
import { useSession, updateUser } from "next-auth/react";
import ServiceItem from "@/Components/ServiceItem";
import Head from "next/head";
import Container from "@/Components/Container.js";
import { abi2, contractAddresses2 } from "../constants/usd/index";
import abi from "../constants/abi/abi";
import Moralisget from "@/Components/Moralisget";
//contratos

// Material Ui

export default function Inversiones() {
  let template = {
    _id: "",
    name: "",
    description: "",
    image: "",
    users: "",
    raking: "",
    token: "",
  };

  const router = useRouter();
  const { data: session } = useSession();
  const { update } = useSession();
  const [ArrProj, setArrProj] = useState([]);
  const [contract, setcontract] = useState("");
  const [amount, setamount] = useState("");

  /*
   *       Configuracion inicial de Moralis
   */
  const { chainId: chainIdHex, account, isWeb3Enabled, Moralis } = useMoralis();
  const chainId = parseInt(chainIdHex);
  const usdAddress = chainId in contractAddresses2 ? contractAddresses2[chainId][0] : null;

  useEffect(() => {
    const server = process.env.NEXT_PUBLIC_SERVER;
    const loadNftData = async () => {
      try {
        const response = await fetch(` /api/Projects`);
        const data = await response.json();
        setArrProj(JSON.parse(JSON.stringify(data)));
        console.log(JSON.parse(JSON.stringify(ArrProj)));
      } catch (error) {
        console.error(error);
      }
    };
    loadNftData();
  }, []);
  const Prueba = async (contract) => {
    Moralisget(account, contract);
    let res = await getTokens();
    console.log(res);
  };

  const mint = async (e) => {
    e.preventDefault();
    alert("Por favor aprueba el valor exacto del token en USDT");
    const res = await getTokens();
    console.log(res);
  };
  const handlerVote = async (rank, event) => {
    const server = process.env.NEXT_PUBLIC_SERVER;
    console.log(rank);
    try {
      const response = await fetch(` /api/Projects/${ArrProj._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          users: parseInt(ArrProj.users) + 1,
          raking: parseInt(ArrProj.raking) + rank,
        }),
      });
      if (!response.ok) {
        throw new Error(response);
      }
      alert("calificacion exitosa");
    } catch (error) {
      alert(error.message);
    }
  };

  return (
    <>
      <Head>
        <title>GMProject</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <section id="dash">
          <div className="sectionUsuario">
            {ArrProj.length > 1 ? (
              <div className="row sectionUsuario p-3">
                {ArrProj.map((project) => (
                  <div className="col-lg-4 col-md-4 col-sm-5 mb-3">
                    <Moralisget id={project._id} title={project.name} description={project.description} image={project.image} wallet={account} contract={project.token} />
                  </div>
                ))}
              </div>
            ) : (
              <></>
            )}
          </div>
        </section>
      </Container>
    </>
  );
}
